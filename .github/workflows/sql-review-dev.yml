name: fox-sql-review-dev
# on: [pull_request]
# on: [push]

on:
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:    
      - develop
      - 'feature-*/**'

jobs:
  # split-schema-sql-file:
  #     runs-on: ubuntu-latest
  #     steps:
  #     - uses: actions/checkout@v3
  #     - run:  mkdir -p ${{ runner.temp }}/schema
  #     - name: Split schema.sql into small sql
  #       run: |
  #         pwd
  #         ls -al `pwd`
  #         sql_origin_path="./temp/schema.sql"
  #         # sql_split_path="${{ runner.temp }}/schema"
  #         sql_split_path="./db/dev/migration-liquibase/test"
  #         awk '{filename = "schema-split-" int((NR-1)/500) ".sql"; print >> filename}' $sql_origin_path
  #         for i in *.sql; do mv "$i" $sql_split_path; done
  #         pwd && ls -al $sql_split_path
  #       shell: bash
  #     - name: Upload sql to temp
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: Upload SQL
  #         # path: ${{ runner.temp }}/schema/*.sql
  #         path: ./db/dev/migration-liquibase/test/*.sql
  #     - name: list split result
  #       run: |
  #           echo "ls runner temp"
  #           ls -al ${{ runner.temp }}/schema/
  #           echo "ls dev test"
  #           ls -al ./db/dev/migration-liquibase/test
  #       shell: bash
  #     # - uses: actions/checkout@v3
  #     - name: Check DEV SPLIT SQL SCRIPT ON Worker
  #       # uses: bytebase/sql-review-action@main
  #       uses: foxyoyo/clone-sql-review-t@master
  #       with:
  #         template-id: bb.sql-review.dev
  #         database-type: POSTGRES
  #         # file-pattern: /home/runner/work/_temp/schema/schema-split-0.sql
  #         # file-pattern:  ^home/runner/work/_temp/schema/.*\.sql$
  #         file-pattern:   ^db/dev/.*/.*/.*\.sql$
  sql-review-dev:
      runs-on: ubuntu-latest
      # needs: split-schema-sql-file
      name: SQL Review
      steps:
      - name: checkout
        uses: actions/checkout@v3
        # with:
        #   repository: foxyoyo/clone-sql-review-t
        #   ref: master
        #   token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        #   path: ./
      - name: Check DEV SQL SCRIPT ON Github
        # uses: bytebase/sql-review-action@main
        # uses: foxyoyo/clone-sql-review-t@master
        # uses: foxyoyo/sql-githubaction-t@develop
        uses: ./action
        with:
          ## override-file-path: "<Your SQL review rules configuration file path>, ie: ./sql-review-override.yml "
          template-id: bb.sql-review.dev
          database-type: POSTGRES
          file-pattern:  ^db/dev/.*/.*/.*\.sql$
          # file-pattern: ^home/runner/work/_temp/schema/.*\.sql$
      # - name: Notify SQL Review result
      #   # if: failure()
      #   if: always()
      #   id: slack
      #   uses: slackapi/slack-github-action@v1.24.0
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #   with:
      #     channel-id: ${{ secrets.SLACK_WEBHOOK_CHANNEL }}
      #     payload: |
      #       {
      #         "text": "GitHub Action SQL syntax review result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "GitHub Action SQL syntax review result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      #             }
      #           }
      #         ]
      #       }

  # sql-deploy-to-dev:
  #   needs: sql-review-dev
  #   runs-on: ubuntu-latest
  #   name: Run SQL CD Here
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: You can run SQL CD job here
  #       run: |
  #         echo "Run CD pipeline here "
  #     - name: Notify SQL CD pipeline result
  #       if: always()
  #       id: slack
  #       uses: slackapi/slack-github-action@v1.24.0
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #       with:
  #         channel-id: ${{ secrets.SLACK_WEBHOOK_CHANNEL }}
  #         payload: |
  #           {
  #             "text": "GitHub Action SQL CD pipeline: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
  #             "blocks": [
  #               {
  #                 "type": "section",
  #                 "text": {
  #                   "type": "mrkdwn",
  #                   "text": "GitHub Action SQL CD pipeline:: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
  #                 }
  #               }
  #             ]
  #           }